AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  proj-pronetplat-aa

  Sample SAM Template for proj-pronetplat-aa
  
Parameters:
  Stage:
    Description: Required staged of the current build
    Type: String
    Default: dev

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 512
    Timeout: 60
    Runtime: nodejs12.x
    Environment:
      Variables:
        STAGE: !Ref Stage
        USERS_BUCKET: !Ref usersS3Bucket
        PUSH_NOTIF_FN: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-sendPushNotifications"
        SEND_EMAIL_FN: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-sendEmail"
        INVALIDATE_DEVICETOKEN_FN: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-sendEmail"
  Api:
    OpenApiVersion: 3.0.1

Resources:
  ######
  # Guest routes
  #
  register:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/guest/register.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-register"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: !GetAtt sendEmail.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /register
            RestApiId:
              Ref: mainBackendApi
  forgotPasswordSend:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/guest/forgotPasswordSend.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-forgotPasswordSend"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: !GetAtt sendEmail.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /forgot-password-send
            RestApiId:
              Ref: mainBackendApi
  forgotPasswordConfirm:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/guest/forgotPasswordConfirm.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-forgotPasswordConfirm"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: !GetAtt sendEmail.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /forgot-password-confirm
            RestApiId:
              Ref: mainBackendApi
  login:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/guest/login.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-login"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /login
            RestApiId:
              Ref: mainBackendApi
  ######
  # Auth routes
  #
  verifyEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/verifyEmail.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-verifyEmail"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: !GetAtt sendEmail.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /verify-email
            RestApiId:
              Ref: mainBackendApi
  resendEmailCode:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/resendEmailCode.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-resendEmailCode"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: !GetAtt sendEmail.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /resend-email-code
            RestApiId:
              Ref: mainBackendApi
  changePersonalInfo:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/changePersonalInfo.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-changePersonalInfo"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /change-personal-info
            RestApiId:
              Ref: mainBackendApi
  changeProfilePicture:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/changeProfilePicture.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-changeProfilePicture"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              - !Join
                - ""
                - - !GetAtt usersS3Bucket.Arn
                  - "/*.jpg"
              - !Join
                - ""
                - - !GetAtt usersS3Bucket.Arn
                  - "/*.jpeg"
              - !Join
                - ""
                - - !GetAtt usersS3Bucket.Arn
                  - "/*.png"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /change-profile-picture
            RestApiId:
              Ref: mainBackendApi
  addToContact:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/addToContact.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-addToContact"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: !GetAtt sendPushNotifications.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /add-to-contacts/{contactId}
            RestApiId:
              Ref: mainBackendApi
  badgeCount:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/badgeCount.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-badgeCount"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /badge-count
            RestApiId:
              Ref: mainBackendApi
  receivedContactRequests:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/receivedContactRequests.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-receivedContactRequests"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /received-contact-requests
            RestApiId:
              Ref: mainBackendApi
  notifications:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/notifications.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-notifications"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /notifications
            RestApiId:
              Ref: mainBackendApi
  acceptContactRequest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/acceptContactRequest.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-acceptContactRequest"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: !GetAtt sendPushNotifications.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /accept-contact-request
            RestApiId:
              Ref: mainBackendApi
  declineContactRequest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/declineContactRequest.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-declineContactRequest"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - lambda:InvokeFunction
            Effect: Allow
            Resource: !GetAtt sendPushNotifications.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /decline-contact-request
            RestApiId:
              Ref: mainBackendApi
  contactDetails:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/auth/contactDetails.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-contactDetails"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /contacts/{contactId}
            RestApiId:
              Ref: mainBackendApi
  ######
  # Invokable functions
  #
  sendPushNotifications:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/events/invoke/sendPushNotifications.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-sendPushNotifications"
      Layers:
        - !Ref dependencies
  sendEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/functions/events/invoke/sendEmail.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-sendEmail"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - ses:SendEmail
            Effect: Allow
            Resource: "*"
  ######
  # S3 Events
  #
  # profilePictureUploaded:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/functions/events/s3/profilePictureUploaded.handler
  #     MemorySize: 2048
  #     Layers:
  #       - !Ref dependencies
  #     Policies:
  #       - Statement:
  #         - Action:
  #             - s3:GetObject
  #           Effect: Allow
  #           Resource:
  #             - !Join
  #               - ""
  #               - - !GetAtt usersS3Bucket.Arn
  #                 - "/*.jpg"
  #             - !Join
  #               - ""
  #               - - !GetAtt usersS3Bucket.Arn
  #                 - "/*.jpeg"
  #             - !Join
  #               - ""
  #               - - !GetAtt usersS3Bucket.Arn
  #                 - "/*.png"
  #     Events:
  #       Upload:
  #         Type: S3
  #         Properties:
  #           Bucket: !Ref usersS3Bucket
  #           Events: s3:ObjectCreated:Put
  #           Filter:
  #             S3Key:
  #               Rules:
  #                 - Name: prefix
  #                   Value: newProfilePicture_
  ######
  # Lambda layers
  #
  dependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
      ContentUri: src/dependencies
      LayerName: proj-pronetplat-aa
      RetentionPolicy: Delete
  ######
  # API
  #
  mainBackendApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
  ######
  # S3 buckets
  #
  usersS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - "proj-pronetplat-aa-users"
          - !Ref Stage
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"
      Tags:
        - Key: "what"
          Value: "proj-pronetplat-aa users s3 bucket"

# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
