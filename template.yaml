AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  proj-pronetplat-aa

  Sample SAM Template for proj-pronetplat-aa
  
Parameters:
  Stage:
    Description: Stage of the current build
    Type: String
    AllowedValues:
      - dev
      - staging
      - production

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 1024
    ReservedConcurrentExecutions: 25
    Timeout: 30
    Runtime: nodejs12.x
    Environment:
      Variables:
        stage: !Ref Stage
        usersBucket: !Join
          - "-"
          - - "proj-pronetplat-aa-users"
            - !Ref Stage
        fn_sendPushNotification: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-sendPushNotification"
        fn_sendEmail: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-sendEmail"
        fn_forceExpireDeviceToken: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-forceExpireDeviceToken"
        fn_sendForgotPasswordCode: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-sendForgotPasswordCode"
        fn_confirmForgotPassword: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-confirmForgotPassword"
        fn_createAccount: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-createAccount"
        fn_markNotificationsAsSeen: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-markNotificationsAsSeen"
        fn_createNotification: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-createNotification"
        fn_incrementNumTimesOpened: !Join
          - '-'
          - - !Ref Stage
            - "proj-pronetplat-aa-incrementNumTimesOpened"
  Api:
    OpenApiVersion: 3.0.1

Resources:
  ######
  # Guest routes
  #
  register:
    Type: AWS::Serverless::Function
    Properties:
      Handler: register.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-register"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref createAccount
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /register
            RestApiId:
              Ref: mainBackendApi
  forgotPasswordSend:
    Type: AWS::Serverless::Function
    Properties:
      Handler: forgotPasswordSend.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-forgotPasswordSend"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref sendForgotPasswordCode
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /forgot-password-send
            RestApiId:
              Ref: mainBackendApi
  forgotPasswordConfirm:
    Type: AWS::Serverless::Function
    Properties:
      Handler: forgotPasswordConfirm.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-forgotPasswordConfirm"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref confirmForgotPassword
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /forgot-password-confirm
            RestApiId:
              Ref: mainBackendApi
  login:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-login"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /login
            RestApiId:
              Ref: mainBackendApi
  ######
  # Auth routes
  #
  verifyEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: verifyEmail.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-verifyEmail"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref sendEmail
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /verify-email
            RestApiId:
              Ref: mainBackendApi
  resendEmailCode:
    Type: AWS::Serverless::Function
    Properties:
      Handler: resendEmailCode.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-resendEmailCode"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref sendEmail
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /resend-email-code
            RestApiId:
              Ref: mainBackendApi
  changePersonalInfo:
    Type: AWS::Serverless::Function
    Properties:
      Handler: changePersonalInfo.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-changePersonalInfo"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /change-personal-info
            RestApiId:
              Ref: mainBackendApi
  changeProfilePicture:
    Type: AWS::Serverless::Function
    Properties:
      Handler: changeProfilePicture.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-changeProfilePicture"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              - !Join
                - ""
                - - !GetAtt usersS3Bucket.Arn
                  - "/*.jpg"
              - !Join
                - ""
                - - !GetAtt usersS3Bucket.Arn
                  - "/*.jpeg"
              - !Join
                - ""
                - - !GetAtt usersS3Bucket.Arn
                  - "/*.png"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /change-profile-picture
            RestApiId:
              Ref: mainBackendApi
  addToContact:
    Type: AWS::Serverless::Function
    Properties:
      Handler: addToContact.handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref sendPushNotification
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-addToContact"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /add-to-contacts
            RestApiId:
              Ref: mainBackendApi
  receivedContactRequests:
    Type: AWS::Serverless::Function
    Properties:
      Handler: receivedContactRequests.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-receivedContactRequests"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /received-contact-requests
            RestApiId:
              Ref: mainBackendApi
  notifications:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notifications.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-notifications"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref markNotificationsAsSeen
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /notifications
            RestApiId:
              Ref: mainBackendApi
  acceptContactRequest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: acceptContactRequest.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-acceptContactRequest"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref createNotification
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /accept-contact-request
            RestApiId:
              Ref: mainBackendApi
  declineContactRequest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: declineContactRequest.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-declineContactRequest"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref createNotification
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /decline-contact-request
            RestApiId:
              Ref: mainBackendApi
  contactDetails:
    Type: AWS::Serverless::Function
    Properties:
      Handler: contactDetails.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-contactDetails"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref incrementNumTimesOpened
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /contacts/{contactId}
            RestApiId:
              Ref: mainBackendApi
  validateAuth:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validateAuth.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-validateAuth"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /validate-auth
            RestApiId:
              Ref: mainBackendApi
  sendFollowUp:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendFollowUp.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-sendFollowUp"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref createNotification
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /send-follow-up
            RestApiId:
              Ref: mainBackendApi
  cancelContactRequest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cancelContactRequest.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-cancelContactRequest"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref createNotification
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /cancel-contact-request
            RestApiId:
              Ref: mainBackendApi
  removeFromContacts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: removeFromContacts.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-removeFromContacts"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /remove-from-contacts
            RestApiId:
              Ref: mainBackendApi
  blockUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: blockUser.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-blockUser"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /block-user
            RestApiId:
              Ref: mainBackendApi
  unblockUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: unblockUser.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-unblockUser"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /unblock-user
            RestApiId:
              Ref: mainBackendApi
  myContacts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: myContacts.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-myContacts"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /my-contacts
            RestApiId:
              Ref: mainBackendApi
  blockList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: blockList.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-blockList"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /block-list
            RestApiId:
              Ref: mainBackendApi
  logout:
    Type: AWS::Serverless::Function
    Properties:
      Handler: logout.handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref forceExpireDeviceToken
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-logout"
      Layers:
        - !Ref dependencies
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /logout
            RestApiId:
              Ref: mainBackendApi
  ######
  # Invokable functions
  #
  createNotification:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createNotification.handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref sendPushNotification
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-createNotification"
      Layers:
        - !Ref dependencies
  sendPushNotification:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendPushNotification.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-sendPushNotification"
      Layers:
        - !Ref dependencies
  forceExpireDeviceToken:
    Type: AWS::Serverless::Function
    Properties:
      Handler: forceExpireDeviceToken.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-forceExpireDeviceToken"
      Layers:
        - !Ref dependencies
  sendEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendEmail.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-sendEmail"
      Layers:
        - !Ref dependencies
      Policies:
        - Statement:
          - Action:
              - ses:SendEmail
            Effect: Allow
            Resource: "*"
  sendForgotPasswordCode:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendForgotPasswordCode.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-sendForgotPasswordCode"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref sendEmail
  confirmForgotPassword:
    Type: AWS::Serverless::Function
    Properties:
      Handler: confirmForgotPassword.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-confirmForgotPassword"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref sendEmail
  createAccount:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createAccount.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-createAccount"
      Layers:
        - !Ref dependencies
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref sendEmail
  markNotificationsAsSeen:
    Type: AWS::Serverless::Function
    Properties:
      Handler: markNotificationsAsSeen.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-markNotificationsAsSeen"
      Layers:
        - !Ref dependencies
  incrementNumTimesOpened:
    Type: AWS::Serverless::Function
    Properties:
      Handler: incrementNumTimesOpened.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-incrementNumTimesOpened"
      Layers:
        - !Ref dependencies
  ######
  # S3 Events
  #
  profilePictureUploaded:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 4096
      Handler: profilePictureUploaded.handler
      FunctionName: !Join
        - '-'
        - - !Ref Stage
          - "proj-pronetplat-aa-profilePictureUploaded"
      Layers:
        - !Ref dependencies
      Policies:
        - S3CrudPolicy:
            BucketName: !Join
              - "-"
              - - "proj-pronetplat-aa-users"
                - !Ref Stage
      Events:
        Upload:
          Type: S3
          Properties:
            Bucket: !Ref usersS3Bucket
            Events: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: newProfilePicture_
  ######
  # Lambda layers
  #
  dependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
      ContentUri: dependencies
      LayerName: proj-pronetplat-aa
      RetentionPolicy: Delete
  ######
  # API
  #
  mainBackendApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
  ######
  # S3 buckets
  #
  usersS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - "-"
        - - "proj-pronetplat-aa-users"
          - !Ref Stage
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"
      MetricsConfigurations:
        - Id: "profilePicture_"
          Prefix: "profilePicture_"
        - Id: "newProfilePicture_"
          Prefix: "newProfilePicture_"
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      Tags:
        - Key: "what"
          Value: "proj-pronetplat-aa users s3 bucket"

# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
